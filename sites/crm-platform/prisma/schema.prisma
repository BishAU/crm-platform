// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  MarketingList MarketingList[]
  facilities    Facility[]
  supportTickets SupportTicket[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Outfall {
  id             String    @id @default(cuid())
  authority      String?
  contact        String?
  contact_email  String?
  contact_name   String?
  indigenousNation String?
  landCouncil    String?
  latitude       String?
  longitude      String?
  state          String?
  type           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  outfallName    String?
  postcodes      OutfallPostcode[]
  observations   OutfallObservation[]
}

model OutfallPostcode {
  id        String   @id @default(cuid())
  outfallId String
  postcode  String
  radius    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  outfall   Outfall   @relation(fields: [outfallId], references: [id])
}

model Politician {
  id        String   @id @default(cuid())
  name      String
  email     String?   @unique
  party     String?
  position  String?
  state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MarketingList {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entities  MarketingListEntity[]
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
}

model MarketingListEntity {
  id                String   @id @default(cuid())
  marketingListId String
  entityType        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  marketingList     MarketingList @relation(fields: [marketingListId], references: [id])
  filters           MarketingListFilter[]
}

model MarketingListFilter {
  id                    String   @id @default(cuid())
  marketingListEntityId String
  field                 String
  operator              String
  value                 String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  marketingListEntity   MarketingListEntity @relation(fields: [marketingListEntityId], references: [id])
}

model Facility {
  id          String   @id @default(cuid())
  latitude    String?
  longitude   String?
  postcode    String?
  regionType  String?
  sector      String?
  suburb      String?
  type        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
}

model IndigenousCommunity {
  id          String   @id @default(cuid())
  name        String
  region      String?
  population  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OutfallObservation {
  id        String   @id @default(cuid())
  outfallId String
  date      DateTime
  flow      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  outfall   Outfall   @relation(fields: [outfallId], references: [id])
}

model SupportTicket {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String?
  assignedToId String?
  assignedTo  User? @relation(fields: [assignedToId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
