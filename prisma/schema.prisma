// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(cuid())
  name                 String?
  email                String?         @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  refreshToken         String?         @db.Text
  isAdmin              Boolean         @default(false)
  // Relations
  accounts             Account[]
  sessions             Session[]
  facilities           Facility[]
  supportTickets       SupportTicket[]
  marketingLists       MarketingList[]
  // User profile fields
  abn                  String?
  address1             String?
  annualReportPrepared Boolean?        @default(false)
  annualReports        String?
  auditor              String?
  budgetDocumentation  String?
  city                 String?
  classification       String?
  company              String?
  country              String?
  creationDate         DateTime?
  dob                  DateTime?
  description          String?
  establishedBy        String?
  establishedByInfo    String?
  firstName            String?
  fullName             String?
  gfsSector            String?
  gfsFunction          String?
  headOfficeCountry    String?
  headOfficePostcode   String?
  headOfficeState      String?
  headOfficeAddress    String?
  headOfficeSuburb     String?
  lastName             String?
  materiality          String?
  newsletter           Boolean?        @default(false)
  optInStatus          String?
  organisation         String?
  psActBody            String?
  phone                String?
  phoneNumber          String?
  physicalAddress      String?
  physicalAddressState String?
  portfolio            String?
  portfolioDept        String?
  postcode             String?
  relationship         String?
  state                String?
  strategicPlan        String?
  surname              String?
  title                String?
  typeOfBody           String?
  websiteAddress       String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Outfall {
  id                    String               @id @default(cuid())
  authority             String?
  contact               String?
  contact_email         String?
  contact_name          String?
  indigenousNation      String?
  landCouncil           LandCouncil?        @relation(fields: [landCouncilId], references: [id])
  landCouncilId         String?
  latitude              String?
  longitude             String?
  state                 String?
  type                  String?
  outfallName           String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  postcodes             OutfallPostcode[]
  observations          OutfallObservation[]
  waterAuthority        WaterAuthority?      @relation(fields: [waterAuthorityId], references: [id])
  waterAuthorityId      String?
  indigenousCommunity   IndigenousCommunity? @relation(fields: [indigenousCommunityId], references: [id])
  indigenousCommunityId String?
}

model OutfallPostcode {
  id        String   @id @default(cuid())
  outfallId String
  postcode  String
  radius    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  outfall   Outfall  @relation(fields: [outfallId], references: [id], onDelete: Cascade)
}

model Politician {
  id             String    @id @default(cuid())
  name           String
  email          String?   @unique
  party          String?
  position       String?
  state          String?
  address        String?
  city           String?
  eoAddress      String?
  electorate     String?
  fax            String?
  firstName      String?
  gender         String?
  house          String?
  lastName       String?
  lastUpdated    DateTime?
  minAddress     String?
  minPhone       String?
  minister       Boolean?  @default(false)
  poAddress      String?
  poPostcode     String?
  partyAbb       String?
  phone          String?
  photo          String?
  politicalParty String?
  preferredName  String?
  salutation     String?
  surname        String?
  title          String?
  web            String?
  imageUrl       String?
  fullName       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model MarketingList {
  id        String                 @id @default(cuid())
  name      String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  entities  MarketingListEntity[]
  creator   User?                 @relation(fields: [creatorId], references: [id])
  creatorId String?
}

model MarketingListEntity {
  id              String               @id @default(cuid())
  marketingListId String
  entityType      String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  marketingList   MarketingList        @relation(fields: [marketingListId], references: [id], onDelete: Cascade)
  filters         MarketingListFilter[]
}

model MarketingListFilter {
  id                    String              @id @default(cuid())
  marketingListEntityId String
  field                 String
  operator              String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  marketingListEntity   MarketingListEntity @relation(fields: [marketingListEntityId], references: [id], onDelete: Cascade)
}

model Facility {
  id         String   @id @default(cuid())
  latitude   String?
  longitude  String?
  postcode   String?
  regionType String?
  sector     String?
  suburb     String?
  type       String?
  name       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  creator    User     @relation(fields: [creatorId], references: [id])
  creatorId  String
}

model IndigenousCommunity {
  id               String    @id @default(cuid())
  name             String    @unique
  region           String?
  population       Int?
  waterAuthorities WaterAuthority[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  outfalls         Outfall[]
}

model OutfallObservation {
  id        String   @id @default(cuid())
  outfallId String
  date      DateTime
  flow      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  outfall   Outfall  @relation(fields: [outfallId], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id           String   @id @default(cuid())
  title        String
  description  String?
  status       String?
  assignedTo   User?    @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model LandCouncil {
  id           String    @id @default(cuid())
  name         String?   @unique
  email        String?
  lgas         String?
  outfallCount Int?
  outfalls     Outfall[]
  phone        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WaterAuthority {
  id                    String               @id @default(cuid())
  name                  String               @unique
  indigenousCommunities IndigenousCommunity[]
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  outfalls              Outfall[]
}

model Observation {
  id             String   @id @default(cuid())
  title          String
  description    String
  type           String
  contact_name   String
  contact_email  String
  contact_phone  String?
  media_images   String[]
  media_video    String?
  status         String   @default("pending")
  source         String   @default("external")
  observedAt     DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Campaign {
  id             String    @id @default(cuid())
  name           String
  description    String?
  status         String    @default("draft")
  startDate      DateTime?
  endDate        DateTime?
  budget         Decimal?  @db.Decimal(10, 2)
  targetAudience String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
